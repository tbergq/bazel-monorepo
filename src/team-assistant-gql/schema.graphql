# @generated SignedSource<<0079a5b695880c8511127e4bca442f23>>

# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Test.test was removed.
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

"""Error type for creating an account"""
type CreateAccountError implements Error {
  message: String
  reason: CreateAccountErrorReason
}

enum CreateAccountErrorReason {
  EMAIL_EXISTS
  INVALID_EMAIL
  MISSING_PASSWORD
  UNKNOWN
}

union CreateAccountResponse = CreateAccountError | Identity

"""Error type for creating a team"""
type CreateTeamError implements Error {
  message: String
  reason: CreateTeamErrorReason
}

enum CreateTeamErrorReason {
  NAME_MISSING
}

union CreateTeamPayload = CreateTeamError | Team

interface Error {
  message: String
}

"""Identity object of a user"""
type Identity {
  email: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
}

"""The response of a login mutation"""
type LoginResponse {
  token: String
}

"""Root Mutation."""
type RootMutation {
  createAccount(email: String!, password: String!): CreateAccountResponse
  createTeam(name: String!): CreateTeamPayload
  login(email: String!, password: String!): LoginResponse
}

"""Root Query"""
type RootQuery {
  """Just for testing purpose"""
  test(id: String!): Test
}

"""A team"""
type Team {
  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
}

"""Just for test purpose, will be removed later"""
type Test {
  firstName: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  lastName: String
}
