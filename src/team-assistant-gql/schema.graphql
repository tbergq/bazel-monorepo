# @generated SignedSource<<3d27ab01bc2eae997d0947134aa9fc3a>>

# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Test.test was removed.
#  TYPE_REMOVED_FROM_UNION: Team was removed from union type CreateTeamPayload.
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

"""Error type for creating an account"""
type CreateAccountError implements Error {
  message: String
  reason: CreateAccountErrorReason
}

enum CreateAccountErrorReason {
  EMAIL_EXISTS
  INVALID_EMAIL
  MISSING_PASSWORD
  UNKNOWN
}

union CreateAccountResponse = CreateAccountError | Identity

"""Contains the team edge"""
type CreateTeamEdge {
  teamEdge: TeamEdge
}

"""Error type for creating a team"""
type CreateTeamError implements Error {
  message: String
  reason: CreateTeamErrorReason
}

enum CreateTeamErrorReason {
  NAME_MISSING
}

union CreateTeamPayload = CreateTeamEdge | CreateTeamError

interface Error {
  message: String
}

"""Identity object of a user"""
type Identity {
  email: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
}

"""The response of a login mutation"""
type LoginResponse {
  token: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Root Mutation."""
type RootMutation {
  createAccount(email: String!, password: String!): CreateAccountResponse
  createTeam(name: String!): CreateTeamPayload
  login(email: String!, password: String!): LoginResponse
}

"""Root Query"""
type RootQuery {
  """Just for testing purpose"""
  test(id: String!): Test

  """The context of the logged in user"""
  viewer: Viewer
}

"""A team"""
type Team {
  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
}

"""A connection to a list of items."""
type TeamConnection {
  """A list of edges."""
  edges: [TeamEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TeamEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Team
}

"""Just for test purpose, will be removed later"""
type Test {
  firstName: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  lastName: String
}

"""Defines a not logged in type"""
type Unauthorized {
  message: String!
}

"""The logged in user"""
type User {
  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  identity: Identity
  teams(after: String, before: String, first: Int, last: Int): TeamConnection
}

"""The viewer type"""
union Viewer = Unauthorized | User
