# @generated SignedSource<<b7f3a1281f03c6f26e686f0ff98a0d4e>>

# <BREAKING-CHANGES-LOG>
#  TYPE_REMOVED: Test was removed.
#  FIELD_REMOVED: RootQuery.test was removed.
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

"""Successful exercise creation model"""
type CreateExercise {
  exerciseEdge: ExerciseEdge
}

"""Model for create an exercise error"""
type CreateExerciseError implements Error {
  message: String
  reason: CreateExerciseErrorReason
}

enum CreateExerciseErrorReason {
  UNAUTHORIZED
  UNEXPECTED
}

"""Model for creating an exercise"""
input CreateExerciseInput {
  muscleGroups: [String]
  name: String!
}

"""Union type of creating an exercise"""
union CreateExercisePayload = CreateExercise | CreateExerciseError

interface Error {
  message: String
}

"""Model of an exercise"""
type Exercise {
  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  muscleGroups: [String]
  name: String
}

"""A connection to a list of items."""
type ExerciseConnection {
  """A list of edges."""
  edges: [ExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ExerciseEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Exercise
}

"""The logged in user"""
type Me {
  email: String
  exercises: ExerciseConnection

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Root Mutation."""
type RootMutation {
  createExercise(exercise: CreateExerciseInput!): CreateExercisePayload
}

"""Root Query"""
type RootQuery {
  me: Me
}
